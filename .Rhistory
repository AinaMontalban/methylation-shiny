font-weight: 500; line-height: 1.1;
color:   #d66958;")),
###########################  ---  Header ------------ ##############
mainPanel(
navbarPage(
###########################  ---  Home   ------------
title=p(strong("Quality control")),
tabPanel("Home",
h3("Quality control"),
br(),
p(strong("Summary")),
p(strong("Tab 1: Experiment")),
p(strong("Tab 2: Samples")),
p(strong("Tab 3: Methylation Measures")),
p(strong("Tab 4: Control Type")),
p(strong("Tab 5: PCA")),
p(strong("Tab 6: Report Generator")),
br(),
br(),
br(),
br(),
HTML("
<div id=label>I'm a Box</div>")
),
tabPanel("Experiment",
tableOutput("SampleSheetSubset"),
textOutput("SampleSheetInfo"),
),
tabPanel("Samples",
verticalLayout(
HTML("
<div id=label> · Examine mean detection p-values across all samples to identify any failed
samples. </div>"),
br(),
br(),
br(),
br(),
plotOutput("barplotPval"),
HTML("
<div id=label> · Examine the proportion of failed probes. </div>"),
br(),
br(),
br(),
plotOutput("probesFailedPlot")
)),
###########################  ---  Quality control ---
tabPanel("Methylation Measures",
sidebarPanel(
HTML("<p><span style=\"color:#d66958;font-size:16px\">
Color choice:</span></p>"),
selectInput("colorChoice", "Color set:",
list("Pault","Rainbow","Set1","Set2","Set3",
"Paired","Dark2","Accent"),
multiple=FALSE,
selected="Set1"),
HTML("<p><span style=\"color:#d66958;font-size:16px\">
Quality control exploration:</span></p>"),
# radioButtons("mOrBeta", "Methylation measure:",
#             list("Beta-value","M-value"),
#            selected="M-value"),
if ("plate" %in% colnames(covariates)){
choices <- colnames(covariates)
selectInput("phenotype", "Choose a phenotype:",
choices,
multiple=FALSE,
selected ="plate")
} else {
choices <- colnames(covariates)
selectInput("phenotype", "Choose a phenotype:",
choices,
multiple=FALSE)},
checkboxInput("mean","Average density by phenotypic level"),
selectInput("lty", "Density line type (lty):",
list(1,2,3,4,5,6),
multiple=FALSE,
selected=1),
selectInput("lwd", "Density line width (lwd):",
list(0.5,1,1.5,2,3,4,5,6,7,8,9,10),
multiple=FALSE,
selected=1),
radioButtons("mOrBeta", "Methylation measure:",
list("Beta-value","M-value"),
selected="Beta-value"),
selectInput("probeType", "Choose a probe type for the density curves:",
choices = c("I Green","I Red","II","X","Y"),
selected="I Green"),
hr(),
hr(),
hr(),
HTML("<p><span style=\"color:#d66958;font-size:16px\">
Download beta-values:</span></p>"),
downloadLink("betamatrixDownload", "raw_bvalues.csv"),
br(),
br(),
HTML("*Only "),
br(),
downloadLink("betamatrixNormDownload", "norm_bvalues.csv"),
),
mainPanel(
selectInput("normID", "Choose Normalization method:", choices = c("Illumina", "SWAN", "Quantile", "ssNoob", "Funnorm", selected = "ssNoob")),
actionButton("normButton", "Normalize"),
## Densities plot:
HTML('<table border=0 width="100%"><tr bgcolor="#f5f5f5"><td>'),
HTML('</td><td>'),
## Fast quality control plot:
HTML('</td></tr></table>'),
plotOutput("rawDensities", click="click_action"),
verbatimTextOutput("click_info"),
plotOutput("normDensities"),
plotOutput("beanPlot")
#verbatimTextOutput(outputId = "cumulativeListPrint"),
#downloadLink("selectedSamples","selectedSamples.csv")
)),
tabPanel("Control Type",
HTML("<p><span style=\"color:#d66958;font-size:16px\">
Step control</span></p>"),
selectInput("controlType", "Choose a control type:",
choices = controlNames,selected=controlNames[1]),
conditionalPanel(condition="length(sampleNames) >= 50", selectInput("arrayID", "Select array:", arrayNames)),
verticalLayout(
plotOutput("controlTypePlotGreen"),
plotOutput("controlTypePlotRed"))
),
tabPanel("PCA",
sidebarLayout(
plotlyOutput("pcaPlot"),
verticalLayout(
HTML("
<p style=\"color:#000000;font-size:17px\">A. Choose two principal components to visualize: </span></p>
"),
selectInput("pc1", "PC in x:",
seq(1,ncol(betaQuantiles[[1]]),1),
multiple=FALSE,
selected=1),
selectInput("pc2", "PC in y:",
seq(1,ncol(betaQuantiles[[1]]),1),
multiple=FALSE,
selected=2),
HTML("
<p style=\"color:#000000;font-size:17px\">B. Choose a principal component to explore below:</span></p>
"),
selectInput("pcToExplore", "PC:",
seq(1,ncol(betaQuantiles[[1]]),1),
multiple=FALSE,
selected=1),
HTML("
<p style=\"color:#000000;font-size:17px\">C. Choose a covariate to regress against the chosen PC:</span></p>
"),
if (exists("covariates")){
choices <- colnames(covariates)
selectInput("covToRegress", "Covariate:",
choices,
multiple= FALSE)
} else {
selectInput("covToRegress", "Covariate:",
list("Batch"),
multiple= FALSE,
selected="Batch")})),
HTML("
<p style=\"color:#000000;font-size:17px\">Association with the PC:</span></p>
"),
verbatimTextOutput(outputId = "modelPrint")
),
######################   ----   Type I/TypeII Bias --------
tabPanel("Report",
checkboxGroupInput("selectedPlots", "Select:", choices = c("Raw Beta-values",
"Raw m-values", "Normalized beta-values", "Failed Probes", "PCA")),
downloadButton("report", "Generate report")
))
)
)
}
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
directory <- "~/Documents/methylation-shiny"
#directory <- "/home/aina/Internship/methylation-shiny"
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
directory <- "~/Documents/methylation-shiny"
#directory <- "/home/aina/Internship/methylation-shiny"
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
directory <- "~/Documents/methylation-shiny"
#directory <- "/home/aina/Internship/methylation-shiny"
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
directory <- "~/Documents/methylation-shiny"
#directory <- "/home/aina/Internship/methylation-shiny"
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
directory <- "~/Documents/methylation-shiny"
#directory <- "/home/aina/Internship/methylation-shiny"
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
directory <- "~/Documents/methylation-shiny"
#directory <- "/home/aina/Internship/methylation-shiny"
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
directory <- "~/Documents/methylation-shiny"
#directory <- "/home/aina/Internship/methylation-shiny"
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
devtools::install_github('rstudio/rmarkdown')
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
source(paste0(directory, "/", "server.R"))
require(knitr)
require(limma)
require(minfi)
#require(IlluminaHumanMethylation450kanno.ilmn12.hg19)
#require(IlluminaHumanMethylation450kmanifest)
require(IlluminaHumanMethylationEPICanno.ilm10b4.hg19)
require(RColorBrewer)
require(missMethyl)
require(Gviz)
#require(DMRcate)
require(stringr)
require(ggplot2)
require(shiny)
require(base)
require(reshape2)
require(plotly)
directory <- "~/Documents/methylation-shiny"
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
### Example minfi - bioconductor
baseDir <- system.file("extdata", package="minfiData")
targetsEx <- read.metharray.sheet(baseDir)
RGSetEx <- read.metharray.exp(targets = targetsEx)
#summary1 <- shinySummarize(RGSetEx)
summary2 <- shinySummarizepr(RGSetEx)
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
source(paste0(directory, "/", "ui.R"))
tinytex::reinstall_tinytex()
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
source(paste0(directory, "/", "server.R"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
source(paste0(directory, "/", "server.R"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
source(paste0(directory, "/", "report.Rmd"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
source(paste0(directory, "/", "report.Rmd"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
plot(rnorm(20), rnorm(20))
plot(rnorm(20), rnorm(50))
plot(rnorm(20), rnorm(20))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
tempdir()
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(directory, "report.Rmd")
tempReport
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
source(paste0(directory, "/", "report.Rmd"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
source(paste0(directory, "/", "report.Rmd"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
source(paste0(directory, "/", "report.Rmd"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
source(paste0(directory, "/", "report.Rmd"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
source(paste0(directory, "/", "report.Rmd"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
source(paste0(directory, "/", "report.Rmd"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
plotPCA <- function(pca, pc1, pc2, col, covariates, selectedCov, bty="o"){
require(plotly)
pc1pc2 <- cbind(pca[,as.numeric(pc1)], pca[,as.numeric(pc2)])
ax_x <- list(
title = paste("PC", as.numeric(pc1)),
zeroline = FALSE,
showline = TRUE,
showticklabels = TRUE,
showgrid = TRUE
)
ax_y <- list(
title = paste("PC", as.numeric(pc2)),
zeroline = FALSE,
showline = TRUE,
showticklabels = TRUE,
showgrid = TRUE
)
plot(as.data.frame(pc1pc2),x=~V1, y=~V2, type = "scatter", mode="markers", text="", color = unique(covariates[,match(selectedCov, colnames(covariates))]), size = 2) %>%
layout(xaxis = ax_x, yaxis = ax_y)
# xMin <- min(pca[,as.numeric(pc1)])
# xMax <- max(pca[,as.numeric(pc1)])
# xRange <- xMax - xMin
# xlim <- c(xMin-0.05*xRange, xMax+0.20*xRange)
# xlab <- paste("PC",as.numeric(pc1), " scores", sep="")
# ylab <- paste("PC",as.numeric(pc2), " scores", sep="")
# plot(pca[,as.numeric(pc1)], pca[,as.numeric(pc2)],
#      col = col, pch = 19, cex = 2, xlab = xlab,
#      ylab = ylab, xlim = xlim,
#      main = "Principal component analysis (PCA)",
#     cex.main = 1.5, cex.lab = 1.5, bty = bty)
# uColor <- unique(col)
# uCov   <- unique(covariates[,match(selectedCov, colnames(covariates))])
#
# #legend("bottomright", legend = uCov, pch = 19, col = uColor,
#   #     cex = 1.5, title = selectedCov, bty = "n")
# grid()
}
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
source(paste0(directory, "/", "report.Rmd"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
source(paste0(directory, "/", "plotPCA.R"))
summary2
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
envir = new.env(parent = globalenv()
)
envir
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
source(paste0(directory, "/", "report.Rmd"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary2), server = server.methylation(summary2))
pca <- summary2@pca
pca
