tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
snps <- getSnpBeta(rgSet)
colnames(snps) <- targets$Sample_Name
my_palette <- colorRampPalette(c("darkred", "darkgreen", "darkblue"))(n = 299)
heatmap.2(snps, col = my_palette, trace = "none", margins = c(7, 4.5))
library(gplots)
heatmap.2(snps, col = my_palette, trace = "none", margins = c(7, 4.5))
rgSet
snps = getSnpBeta(rgSet)
head(snps)
dim(snps)
class(snps)
### Real data
summary <- shinySummarizepr(rgSet)
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
### Real data
summary <- shinySummarizepr(rgSet)
summary@snps
output$SNPsPlot <- renderPlotly(
heatmap.2(snps)
)
output$SNPsPlot <- renderPlotly(
heatmap.2(snps)
)
heatmap.2(snps)
output$SNPsPlot <- renderPlotly(
heatmap.2(snps, trace = "none")
)
heatmap.2(snps, trace = "none")
heatmap.2(snps, trace = "none", col=colorRampPalette(c("darkblue","white","darkred"))(100))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
snps
t(snps)
output$SNPsPlot <- renderPlot(
ggplot(t(snps))
heatmap.2(snps, trace = "none", col=colorRampPalette(c("darkblue","white","darkred"))(100))
)
ggplot(t(snps))
ggplot(as.data.frame(t(snps)))
melt(snps)
ggplot(longData, aes(x = Var2, y = Var1)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red")
output$SNPsPlot <- renderPlot(
longData <- melt(snps)
ggplot(longData, aes(x = Var2, y = Var1)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red")
#heatmap.2(snps, trace = "none", col=colorRampPalette(c("darkblue","white","darkred"))(100))
)
longData <- melt(snps)
ggplot(longData, aes(x = Var2, y = Var1)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="grey90", high="red")
ggplot(longData, aes(x = Var2, y = Var1)) +
geom_raster(aes(fill=value)) +
scale_fill_gradient(low="green", high="red")
install.packages(“d3heatmap”)
install.packages("d3heatmap")
library(d3heatmap)
d3heatmap(snps)
output$SNPsPlot <- renderPlot(
colnames(snps)
d3heatmap(snps)
#heatmap.2(snps, trace = "none", col=colorRampPalette(c("darkblue","white","darkred"))(100))
)
colnames(snps)
colnames(snps) <- plateNames
colnames(snps)
colnames(snps) <- sampleNames
sampleNames
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
covariates$Sample_Name
colnames(snps) <- covariates$Sample_Name
output$SNPsPlot <- renderPlot(
colnames(snps) <- covariates$Sample_Name
d3heatmap(snps)
#heatmap.2(snps, trace = "none", col=colorRampPalette(c("darkblue","white","darkred"))(100))
)
d3heatmap(snps)
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
d3heatmap(snps, colors = "RdYlBu")
d3heatmap(snps, colors = "Greens")
d3heatmap(snps, colors = "YlOrRd")
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
d3heatmap(snps, colors = "YlOrRd")
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path(tempdir(), "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path("/home/amontalban/Desktop/provaShinyRmd/", "report.Rmd")
tempReport
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path("/home/amontalban/Desktop/provaShinyRmd", "report.Rmd")
tempReport
shinyApp(
ui = fluidPage(
sliderInput("slider", "Slider", 1, 100, 50),
downloadButton("report", "Generate report")
),
server = function(input, output) {
output$report <- downloadHandler(
# For PDF output, change this to "report.pdf"
filename = "report.html",
content = function(file) {
# Copy the report file to a temporary directory before processing it, in
# case we don't have write permissions to the current working dir (which
# can happen when deployed).
tempReport <- file.path("/home/amontalban/Desktop/provaShinyRmd", "report.Rmd")
file.copy("report.Rmd", tempReport, overwrite = TRUE)
# Set up parameters to pass to Rmd document
params <- list(n = input$slider)
# Knit the document, passing in the `params` list, and eval it in a
# child of the global environment (this isolates the code in the document
# from the code in this app).
rmarkdown::render(tempReport, output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
)
### Real data
summary <- shinySummarizepr(rgSet)
summary
summary@pca
mMatrix
mset <- minfi::preprocessRaw(rgSet)
methMatrix <- minfi::getMeth(mset)
unmethMatrix <- minfi::getUnmeth(mset)
betaMatrix <- methMatrix/(methMatrix+unmethMatrix+100)
mMatrix    <- log2((methMatrix+1)/(unmethMatrix+1))
cnMatrix   <- log2(methMatrix+unmethMatrix)
autosomal <- (chr %in% paste0("chr", 1:22))
ann <- getAnnotation(rgSet)
chr <- ann$chr
autosomal <- (chr %in% paste0("chr", 1:22))
autMatrix <- mMatrix[autosomal,]
gc(verbose=FALSE)
o <- order(-rowVars(autMatrix))[1:numPositions]
## To compute the principal components:
numPositions = 20000
o <- order(-rowVars(autMatrix))[1:numPositions]
pca_m <- prcomp(t(autMatrix[o,]))
pca_m = list(scores = pca_m$x, percs = (pca_m$sdev^2)/(sum(pca_m$sdev^2))*100)
names(pca_m$percs) <- colnames(object)
pca_m
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
### Real data
summary <- shinySummarizepr(rgSet)
source(paste0(directory, "/", "run-methylation.R"))
### Real data
summary <- shinySummarizepr(rgSet)
summary@pca_m
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
summary
summary
summary
summary@pca_m$scores
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
source(paste0(directory, "/", "ui.R"))
source(paste0(directory, "/", "server.R"))
source(paste0(directory, "/", "shinyMethylSet.R"))
source(paste0(directory, "/", "shinySummarize0.R"))
source(paste0(directory, "/", "plotDensities.R"))
source(paste0(directory, "/", "plotPCA.R"))
source(paste0(directory, "/", "plotPropFailedProbes.R"))
source(paste0(directory, "/", "run-methylation.R"))
shinyApp(ui=ui.methylation(summary), server = server.methylation(summary))
